sigma0 <- 0.5
solve(sigma0)
sigma0
1/sigma0
A <- hilbert(4)
a <- 1:5
a <- 1:5
a
mean(a)
cbind(1:5, 6:10, 11:15)
rbind(1:5, 6:10, 11:15)
typeof
x <- rbind(1:5, 6:10, 11:15)
typeof(x)
class(x)
library('MASS')
clus1 <- mvrnorm(n=60, mu=1, Sigma=0.2)
clus1
datc <- rbind(clus1, clus1, clus1, clus1)
nrow(datc)
ncol(datc)
c_init <- rep(1, nrow(datc))
dim(c_init)
length(c_init)
z <- c_init
z[1:5]
z[2:4]
n_k = as.vector(table(z))
n_k
table(z)
c_init = c(1,1,2,2,1,1,1,2)
table(c_init)
datc
y=1:5
which(y == 5)
y == 4
y=rbind(1:5, 2:6, 3:7, 4:8)
y
colSums(y)
diag(0.1,3)
clc
cls
clear()
cls()
read.csv('lc.csv')
read.csv('lc.csv')
setwd("~/Documents/anomaly-detection-ngsim/lanechange")
read.csv('lc.csv')
read.csv('lc.csv')
data <- read.csv('lc.csv')
data
View(data)
View(data)
dta <- read.csv('lc.csv')
dta
names(dta)
data.matrix(dta, rownames.force = NA)
mat
mat <- data.matrix(dta, rownames.force = NA)
mat[1,:]
mat[1]
mat[1,]
mat[1,]
ncols(mat[1,])
View(mat)
View(mat)
colnames(mat)<-NULL
rownames(mat)<-NULL
mat
mat[1,]
dim(mat)
dim(mat[1,])
length(mat[1,])
install.packages('fda')
library('fda')
b1.1 <- create.bspline.basis(0:1, nbasis=1, norder=1, breaks=0:1)
plot(b1.1)
bspl1.1 <- create.bspline.basis(norder=1)
plot(bspl1.1)
bspl3.3 <- create.bspline.basis(norder=3)
plot(bspl3.3)
bspl3.3 <- create.bspline.basis(norder=5)
plot(bspl3.3)
x_sample = rep(0,20)
for t in 1:length(x_sample)
{
if (t % 5 == 0)
{
x_sample[t] = t % 5
}
}
for (t in 1:length(x_sample))
{
if (t % 5 == 0)
{
x_sample[t] = t % 5
}
}
1:length(x_sample)
for (t in 1:length(x_sample))
{
print(t)
}
for (t in 1:length(x_sample))
{
if (t % 5 == 0)
{
x_sample[t] = t % 5
}
}
for (t in 1:length(x_sample))
{
if (t % 5 == 0)
{
x_sample[t] <- t % 5
}
}
for (t in 1:length(x_sample))
{
print(t%5)
}
for (t in 1:length(x_sample)){
print(t%5)
}
for (t in 1:length(x_sample))
print(t%5)
for (t in 1:length(x_sample))
{
print(t%5)
}
for (t in 1:length(x_sample))
{
print(t)
}
for (t in 1:length(x_sample))
{
print(t %% 5)
}
for (t in 1:length(x_sample))
{
if (t %% 5 == 0)
{
x_sample[t] = t %% 5
}
}
plot(x_sample)
for (t in 1:length(x_sample))
{
if (t %% 5 > 0)
{
x_sample[t] <- t %% 5
}
}
plot(x_sample)
x_sample = rep(0,20)
for (t in 1:length(x_sample))
{
if (t %% 8 > 0)
{
x_sample[t] <- t %% 5
}
}
x_sample = rep(0,20)
for (t in 1:length(x_sample))
{
if (t %% 8 > 0)
{
x_sample[t] <- t %% 5
}
}
plot(x_sample)
x_sample = rep(0,20)
for (t in 1:length(x_sample))
{
if (t %% 5 > 0)
{
x_sample[t] <- t %% 5
}
}
plot(x_sample)
x_sample = rep(0,20)
for (t in 1:length(x_sample))
{
if (t %% 8 > 0)
{
if (t %% 8 < 5)
{
x_sample[t] <- t %% 5
} else {
x_sample[t] <- 0
}
}
plot(x_sample)
x_sample = rep(0,20)
for (t in 1:length(x_sample))
{
if (t %% 8 > 0)
{
if (t %% 8 < 5)
{
x_sample[t] <- t %% 5
} else {
x_sample[t] <- 0
}
}
plot(x_sample)
plot(x_sample)
plot(x_sample)
plot(x_sample)
x_sample = rep(0,20)
for (t in 1:length(x_sample))
{
if (t %% 8 > 0)
{
if (t %% 8 < 5)
{
x_sample[t] <- t %% 5
} else {
x_sample[t] <- 0
}
}
x_sample = rep(0,20)
for (t in 1:length(x_sample))
{
if (t %% 8 > 0)
{
if (t %% 8 < 5)
{
x_sample[t] <- t %% 5
} else {
x_sample[t] <- 0
}
}
x_sample = rep(0,20)
for (t in 1:length(x_sample))
{
if (t %% 8 > 0)
{
if (t %% 8 < 5)
{
x_sample[t] <- t %% 5
} else {
x_sample[t] <- 0
}
}
plot(x_sample)
x_sample = rep(0,20)
for (t in 1:length(x_sample))
{
if (t %% 8 > 0)
{
if (t %% 8 < 5)
{
x_sample[t] <- t %% 5
} else {
x_sample[t] <- 0
}
}
plot(x_sample)
