#
# =================
# == Initialization of the Dirichlet Process ==
# ==
# Cluster base distribution
mu0 <- 1.0
var0 <- 1.0
tau0 <- solve(var0)
# Measurement variance
vary <- 0.05
tauy <- solve(vary)
# All the changepoints
cp <- list()
Ncp <- 1
# We create an x_cut object which contains all the segments when cutting the x_mat time series
x_cut <- list()
# Originally, this object will just be a duplicate of x_mat, all the original time series not cut
for (ts in 1:nrow(x_mat))
{
x_cut <- append(x_cut, list(x_mat[ts,]))
}
# The number of maximum segments one time series can have
Ncp_max <- 10
# Cluster params
cmu <- rep(mu0, Ncp_max) # if we want we could store the cluster mean in an auxiliary variable, but let's just leave it out for the moment
cvar <- var0 # we don't actually use this because in the simplest case, we just assume a fixed variance for each cluster
ctau <- solve(cvar)
# We create an "attribution" object which indicates the cluster that each segment belongs to (this is for the second CRP
# where we group the segments into the cluster
attr <- matrix(, nrow=nrow(x_mat), ncol=Ncp_max) # 10 is the maximum number of segments in each time series
attr[, 1] <- 1
Nattr_cp <- max(attr, na.rm=T)
alpha_cp <- 2 # the rate at which the time series will decide to open a larger number of changepoints that other time series has not yet considered
Ncp_of_each_ts <- get_number_of_changepoints(cp)
# Assign the initial cluster of each segment, just assign to the same cluster for now
attr[, 1] <- 1
attr[, 2] <- 1
# Number of cluster
Nattr <- 1
# Cluster spawning coefficient
alpha <- 1
# == End of Initialization of the Dirichlet Process ==
# ==
for (ts_index in 1:length(x_cut))
{
cat("\n Processing time series ", ts_index)
# == Step 1: Setting a new number of changepoints for the current TS ==
# Get the seatings of each number of changepoints
cp_seatings <- n_customers_at_each_table_cp(Ncp_of_each_ts, Ncp_max)
# We first unseat the current time series
table_of_current_ts <- Ncp_of_each_ts[ts_index]
cp_seatings[table_of_current_ts] <- cp_seatings[table_of_current_ts] - 1
# We run a fake Chinese Restaurant Process for the current time series to choose
# the number of changepoints cp_table
ts_length <- length(x_mat[ts_index,])
pah <- precalculate_a_and_homogeneity(x_mat[ts_index,], basis, vary)
p_table_cp <- rep(0, Nattr_cp+1)
for (cp_table in 1:(Nattr_cp+1))
{
if (cp_table <= Nattr_cp)
{
# Calculate proba that the time series will open a higher number of changepoints that
# other time series yet to consider
nk_cp <- cp_seatings[cp_table]
N_seatings_cp <- sum(cp_seatings)
p_sit_with_others_cp <- nk_cp / (N_seatings_cp - 1 + alpha_cp)
# We find the optimal segmentation given the number of changepoints equal cp_table
part <- find_most_likely_partitioning_of_a_time_series(ts_length, cp_table, cmu, ctau, Nattr, pah)
p_table_cp[cp_table] <- exp(part$lp) * p_sit_with_others_cp
proposed_cp <- part$cp
} else {
# Calculate proba that the time series will open a higher number of changepoints that
# other time series yet to consider
p_sit_with_others_cp <- alpha / (N_seatings_cp - 1 + alpha_cp)
part <- find_most_likely_partitioning_of_a_time_series(ts_length, cp_table, cmu, ctau, Nattr, pah)
p_table_cp[cp_table] <- exp(part$lp) * p_sit_with_others_cp
proposed_cp <- part$cp
}
} # end of looping through all the tables
p_table_cp <- p_table_cp / sum(p_table_cp)
# Sample the new table for this customer to sit (including opening new one)
table_to_sit_cp <- sample(1:(Nattr_cp+1), 1, replace=T, prob=p_table_cp)
if (table_to_sit_cp == (Nattr_cp + 1))
{
Nattr_cp <- Nattr_cp + 1
cat("\n Maximum changepoints is now ", Nattr_cp)
}
# == End of step 1: Setting a new number of changepoints for the current TS ==
}
debugSource("~/Documents/anomaly-detection-ngsim/lanechange/vwp_test.R")
debugSource("~/Documents/anomaly-detection-ngsim/lanechange/vwp_test.R")
debugSource("~/Documents/anomaly-detection-ngsim/lanechange/vwp_test.R")
debugSource("~/Documents/anomaly-detection-ngsim/lanechange/vwp_test.R")
table_to_sit_cp
p_table_cp
debugSource("~/Documents/anomaly-detection-ngsim/lanechange/vwp_test.R")
exp(part$lp) * p_sit_with_others_cp
part$lp
exp(part$lp)
exp(-10)
exp(part$lp)
part
debugSource("~/Documents/anomaly-detection-ngsim/lanechange/vwp_test.R")
debugSource("~/Documents/anomaly-detection-ngsim/lanechange/vwp_test.R")
debugSource("~/Documents/anomaly-detection-ngsim/lanechange/vwp_test.R")
debugSource("~/Documents/anomaly-detection-ngsim/lanechange/vwp_test.R")
debugSource("~/Documents/anomaly-detection-ngsim/lanechange/vwp_test.R")
debugSource("~/Documents/anomaly-detection-ngsim/lanechange/vwp_test.R")
part$lp
part$cp
part$cp
pah
pah$a[1,12]
pah$a[13,16]
pah$a[17,30]
pah$a[13,17]
part$cp
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_test3cp.R")
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_lib.R")
x_sample <- rep(0,10)
x_mat <- matrix(, nrow=0, ncol = length(x_sample))
slopes <- c(1,3,1,3,1,3,1,3)
zero_period <- 12
rise_period <- 5
for (s in 1:20)
{
slope_id <- 1 # to use different slopes at different rising periods
for (t in 1:length(x_sample))
{
noise = rnorm(1,mean=0,sd=0.2)
if (t %% zero_period > 0)
{
if (t %% 12 < rise_period + 1)
{
# this is a rising period
x_sample[t] <- slopes[slope_id] * (t %% zero_period) %% rise_period + noise
}
else if (t %% 12 == rise_period + 1)
{
slope_id <- slope_id + 1
}
else {
# this is a zero period
x_sample[t] <- noise
}
}
}
x_mat <- rbind(x_mat, x_sample)
}
plot(x_sample)
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_lib.R")
x_sample <- rep(0,10)
x_mat <- matrix(, nrow=0, ncol = length(x_sample))
slopes <- c(1,3,1,3,1,3,1,3)
zero_period <- 5
rise_period <- 5
for (s in 1:20)
{
slope_id <- 1 # to use different slopes at different rising periods
for (t in 1:length(x_sample))
{
noise = rnorm(1,mean=0,sd=0.2)
if (t %% zero_period > 0)
{
if (t %% 12 < rise_period + 1)
{
# this is a rising period
x_sample[t] <- slopes[slope_id] * (t %% zero_period) %% rise_period + noise
}
else if (t %% 12 == rise_period + 1)
{
slope_id <- slope_id + 1
}
else {
# this is a zero period
x_sample[t] <- noise
}
}
}
x_mat <- rbind(x_mat, x_sample)
}
plot(x_sample)
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_lib.R")
x_sample <- rep(0,15)
x_mat <- matrix(, nrow=0, ncol = length(x_sample))
slopes <- c(1,3,1,3,1,3,1,3)
zero_period <- 12
rise_period <- 5
for (s in 1:20)
{
slope_id <- 1 # to use different slopes at different rising periods
for (t in 1:length(x_sample))
{
noise = rnorm(1,mean=0,sd=0.2)
if (t %% zero_period > 0)
{
if (t %% 12 < rise_period + 1)
{
# this is a rising period
x_sample[t] <- slopes[slope_id] * (t %% zero_period) %% rise_period + noise
}
else if (t %% 12 == rise_period + 1)
{
slope_id <- slope_id + 1
}
else {
# this is a zero period
x_sample[t] <- noise
}
}
}
x_mat <- rbind(x_mat, x_sample)
}
plot(x_sample)
# == Initialization of the Dirichlet Process ==
# ==
# Cluster base distribution
mu0 <- 1.0
var0 <- 1.0
tau0 <- solve(var0)
# Measurement variance
vary <- 0.05
tauy <- solve(vary)
# All the changepoints
cp <- list()
Ncp <- 1
# We create an x_cut object which contains all the segments when cutting the x_mat time series
x_cut <- list()
# Originally, this object will just be a duplicate of x_mat, all the original time series not cut
for (ts in 1:nrow(x_mat))
{
x_cut <- append(x_cut, list(x_mat[ts,]))
}
# The number of maximum segments one time series can have
Ncp_max <- 10
# Cluster params
cmu <- rep(mu0, Ncp_max) # if we want we could store the cluster mean in an auxiliary variable, but let's just leave it out for the moment
cvar <- var0 # we don't actually use this because in the simplest case, we just assume a fixed variance for each cluster
ctau <- solve(cvar)
# We create an "attribution" object which indicates the cluster that each segment belongs to (this is for the second CRP
# where we group the segments into the cluster
attr <- matrix(, nrow=nrow(x_mat), ncol=Ncp_max) # 10 is the maximum number of segments in each time series
attr[, 1] <- 1
Nattr_cp <- max(attr, na.rm=T)
alpha_cp <- 2 # the rate at which the time series will decide to open a larger number of changepoints that other time series has not yet considered
Ncp_of_each_ts <- get_number_of_changepoints(cp)
# Assign the initial cluster of each segment, just assign to the same cluster for now
attr[, 1] <- 1
attr[, 2] <- 1
# Number of cluster
Nattr <- 1
# Cluster spawning coefficient
alpha <- 1
# == End of Initialization of the Dirichlet Process ==
# ==
debugSource("~/Documents/anomaly-detection-ngsim/lanechange/vwp_test3cp.R")
part$cp
p_table_cp
p_open_a_new_table_cp
p_this_cp_is_correct
proposed_cp
p_this_cp_is_correct
debugSource("~/Documents/anomaly-detection-ngsim/lanechange/vwp_test3cp.R")
table_to_sit_cp
p_table_cp
p_table_cp
debugSource("~/Documents/anomaly-detection-ngsim/lanechange/vwp_test3cp.R")
debugSource("~/Documents/anomaly-detection-ngsim/lanechange/vwp_test3cp.R")
debugSource("~/Documents/anomaly-detection-ngsim/lanechange/vwp_test3cp.R")
debugSource("~/Documents/anomaly-detection-ngsim/lanechange/vwp_test3cp.R")
p_table_cp
debugSource("~/Documents/anomaly-detection-ngsim/lanechange/vwp_test3cp.R")
debugSource("~/Documents/anomaly-detection-ngsim/lanechange/vwp_test3cp.R")
debugSource("~/Documents/anomaly-detection-ngsim/lanechange/vwp_test3cp.R")
debugSource("~/Documents/anomaly-detection-ngsim/lanechange/vwp_test3cp.R")
debugSource("~/Documents/anomaly-detection-ngsim/lanechange/vwp_test3cp.R")
debugSource("~/Documents/anomaly-detection-ngsim/lanechange/vwp_test3cp.R")
debugSource("~/Documents/anomaly-detection-ngsim/lanechange/vwp_test3cp.R")
debugSource("~/Documents/anomaly-detection-ngsim/lanechange/vwp_test3cp.R")
N_seatings_cp
cp_seatings
Ncp_of_each_ts
cp
get_number_of_changepoints(cp)
Ncp_of_each_ts
debugSource("~/Documents/anomaly-detection-ngsim/lanechange/vwp_test3cp.R")
debugSource("~/Documents/anomaly-detection-ngsim/lanechange/vwp_test3cp.R")
cp_seatings
cp
Ncp_of_each_ts
get_number_of_changepoints(cp)
cp
cp_seatings
get_number_of_changepoints(cp)
lv()
length(get_number_of_changepoints(cp))
debugSource("~/Documents/anomaly-detection-ngsim/lanechange/vwp_test3cp.R")
debugSource("~/Documents/anomaly-detection-ngsim/lanechange/vwp_test3cp.R")
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_lib.R")
debugSource("~/Documents/anomaly-detection-ngsim/lanechange/vwp_test3cp.R")
# This is an example where we try to detect the "slopes"
# ================
#
# GENERATE A SAMPLE SIGNAL
#
# =================
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_lib.R")
x_sample <- rep(0,15)
x_mat <- matrix(, nrow=0, ncol = length(x_sample))
slopes <- c(1,3,1,3,1,3,1,3)
zero_period <- 12
rise_period <- 5
for (s in 1:20) # total number of time series to generate
{
slope_id <- 1 # to use different slopes at different rising periods
for (t in 1:length(x_sample))
{
noise = rnorm(1,mean=0,sd=0.2)
if (t %% zero_period > 0)
{
if (t %% 12 < rise_period + 1)
{
# this is a rising period
x_sample[t] <- slopes[slope_id] * (t %% zero_period) %% rise_period + noise
}
else if (t %% 12 == rise_period + 1)
{
slope_id <- slope_id + 1
}
else {
# this is a zero period
x_sample[t] <- noise
}
}
}
x_mat <- rbind(x_mat, x_sample)
}
plot(x_sample)
# ================
#
# DEFINE A BASIS FUNCTION
#
# =================
basis = 1:30
plot(basis)
# ================
#
# DIRICHLET PROCESS GAUSSIAN MIXTURE MODEL (DP-GMM)
#
# =================
# == Initialization of the Dirichlet Process ==
# ==
# Cluster base distribution
mu0 <- 1.0
var0 <- 1.0
tau0 <- solve(var0)
# Measurement variance
vary <- 0.05
tauy <- solve(vary)
# All the changepoints
cp <- list()
# We create an x_cut object which contains all the segments when cutting the x_mat time series
x_cut <- list()
# Originally, this object will just be a duplicate of x_mat, all the original time series not cut
for (ts in 1:nrow(x_mat))
{
x_cut <- append(x_cut, list(x_mat[ts,]))
}
# The number of maximum segments one time series can have
Ncp_max <- 10
# The maximum number of clusters each segment can take
Ncluster_max <- 10
# Number of current clusters (i.e., tables that all segments might sit)
Nattr <- 1
# Cluster spawning coefficient
alpha <- 1
# Cluster params
cmu <- rep(mu0, Ncluster_max)
cvar <- var0 # we don't actually use Inverse Wishart Prior because in the simplest case, we just assume a fixed variance for each cluster
ctau <- solve(cvar)
# We create an "attribution" object which indicates the cluster that each segment belongs to (this is for the second CRP
# where we group the segments into the cluster
attr <- matrix(, nrow=nrow(x_mat), ncol=Ncp_max) # 10 is the maximum number of segments in each time series
# Assign the initial cluster for each segment, just assign to the same cluster for now
attr[, 1] <- 1
attr[, 2] <- 1
# For the number of changepoints, Nattr_cp is the maximum number of changepoints (tables).
# Each time, a time series will be asked if they want to increase this number (open a new table).
Nattr_cp <- max(attr, na.rm=T)
alpha_cp <- 2 # the rate at which the time series will decide to open a larger number of changepoints that other time series has not yet considered
# We place random changepoints among the time series
# the actual positions of the changepoints are not important
# because we will change them anyway. What matters is many time series will originally sit at
# the same table. This influences the probability to open new table.
for (ts_index in 1:length(x_cut))
{
ts_length <- length(x_cut[[ts_index]])
change_at <- sample(2:ts_length-1, 1)
# cp[ts_index] <- list(append(cp[[ts_index]], change_at))
cp[ts_index] <- list(change_at)
}
# == End of Initialization of the Dirichlet Process ==
# ==
debugSource("~/Documents/anomaly-detection-ngsim/lanechange/vwp_test3cp.R")
p_this_cp_is_correct * p_sit_with_others_cp
debugSource("~/Documents/anomaly-detection-ngsim/lanechange/vwp_test3cp.R")
cp_seatings
cp
cp_seatings
length(cp[1])
length(cp[2])
cp
length(cp[[1]])
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_lib.R")
debugSource("~/Documents/anomaly-detection-ngsim/lanechange/vwp_test3cp.R")
cp_seatings
debugSource("~/Documents/anomaly-detection-ngsim/lanechange/vwp_test3cp.R")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_libc.R")
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_lanechangecont2.R")
dp_sol <- dynamic_program_cp(default_sol, cp_table, x_mat[ts_index,], ts_index, pa_homo, 1, basis, vary, Nattr, cmu, ctau, segment_seatings, alpha)
dp_sol
dp_sol <- dynamic_program_cp(default_sol, cp_table, x_mat[ts_index,], ts_index, pa_homo, 1, basis, vary, Nattr, cmu, ctau, segment_seatings, alpha)
dp_cp <- dp_sol$cp[1:cp_table,1,cp_table]
dp_lp <- dp_sol$p[1,cp_table]
dp_cp
dp_lp
dp_sol$p[1,]
# Housekeeping
rm(list = ls(all.names = TRUE))
gc()
setwd("~/Documents/anomaly-detection-ngsim/lanechange")
# Housekeeping
rm(list = ls(all.names = TRUE))
gc()
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_visualize.R")
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_libc.R")
# source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_lib.R")
# =======================
#
# DATA PREPARATION
#
# =======================
# Load CSV that contains lane changing data
data <- as.matrix(unname(read.csv("~/Documents/anomaly-detection-ngsim/lanechange/lanechange.csv", header=F)))
# We try to resample all the time series to reduce the search space
data_rs <- data[,seq(1,ncol(data), 10)]
rows_to_be_selected <- c()
for (i in 1:nrow(data_rs))
{
if (abs(data_rs[i,1] - data_rs[i, ncol(data_rs)]) > 7)
{
rows_to_be_selected <- append(rows_to_be_selected, i)
}
}
data_srs <- data_rs[rows_to_be_selected,]
# data_srs <- rbind(data_srs, data_srs[10,], data_srs[10,], data_srs[10,])
cat("Dataset dimensions: ", dim(data_srs))
# Plot all the trajectories to visualize first
for (i in 1:nrow(data_srs))
{
# cat("Plotting graph ", i, "\n")
if (i==1)
{
plot(data_srs[1,], ylim=range(data_srs), type='l')
} else {
lines(data_srs[i,])
}
}
x_mat <- data_srs
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_lanechangecont2_dp.R")
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_lanechangecont2_dp.R")
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_lanechangecont2_dp.R")
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_lanechangecont2_dp.R")
log(p_open_a_new_table_cp)
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_lanechangecont2_dp.R")
log(p_open_a_new_table_cp)
aux_ts_index
aux_segment_index
attr[1,3]
attr
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_lanechangecont2_dp.R")
cp
explain_belief(x_mat, cp, cmu, attr, 1)
attr[1,]
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_lanechangecont2_dp.R")
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_lanechangecont2_dp.R")
attr[aux_ts_index,]
table
aux_segment_index
Nattr_cp
attr
Nattr_cp
get_Nattr_cp_from_attr(attr)
x_cut
cp
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_lanechangecont2_dp.R")
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_lanechangecont2_dp.R")
attr
explain_belief(x_mat, cp, cmu, attr, 2)
explain_belief(x_mat, cp, cmu, attr, 1)
explain_belief(x_mat, cp, cmu, attr, 3)
explain_belief(x_mat, cp, cmu, attr, 4)
explain_belief(x_mat, cp, cmu, attr, 5)
explain_belief(x_mat, cp, cmu, attr, 6)
explain_belief(x_mat, cp, cmu, attr, 4)
explain_belief(x_mat, cp, cmu, attr, 7)
