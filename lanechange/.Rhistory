if (current_cp_index == max_cp_index)
{
# cp_list <- append(cp_list, list(vec))
}
cp_list <- append_cp_recursively(cp_list, vec, n_length_ts, current_cp_index + 1, max_cp_index, current_cp)
# We try to add changepoint current_cp + 1
cp_list <- append_cp_recursively(cp_list, vec, n_length_ts, current_cp_index, max_cp_index, current_cp + 1)
}
}
if (current_cp_index <= max_cp_index)
{
current_cp_range <- cp_range(n_length_ts, current_cp_index, current_cp)
current_cp_range
if (current_cp <= tail(current_cp_range, n=1)) # if the current_cp is still in its range
{
if (current_cp == 0) # we have just moved into this index, let's set it to the first value it should have
{
current_cp <- head(current_cp_range, n=1)
}
# There are still things to add in this index
vec[current_cp_index] <- current_cp
if (current_cp_index == max_cp_index)
{
# cp_list <- append(cp_list, list(vec))
}
cp_list <- append_cp_recursively(cp_list, vec, n_length_ts, current_cp_index + 1, max_cp_index, current_cp)
# We try to add changepoint current_cp + 1
cp_list <- append_cp_recursively(cp_list, vec, n_length_ts, current_cp_index, max_cp_index, current_cp + 1)
}
}
current_cp_range
tail(current_cp_range, n=1)
current_cp
if (current_cp <= tail(current_cp_range, n = 1))
{}
if (current_cp <= tail(current_cp_range, n = 1))
{
print("GO")
}
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_lib.R")
append_cp_recursively(list(), c(0), 5, 1, 1, 0)
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_lib.R")
append_cp_recursively(list(), c(0), 5, 1, 1, 0)
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_lib.R")
append_cp_recursively(list(), c(0), 5, 1, 1, 0)
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_lib.R")
append_cp_recursively(list(), c(0), 5, 1, 1, 0)
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_lib.R")
append_cp_recursively(list(), c(0), 5, 1, 1, 0)
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_lib.R")
append_cp_recursively(list(), c(0), 5, 1, 1, 0)
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_lib.R")
cp_range(5, 1, 3)
cp_range(5, 1, 2)
cp_range(5, 1, 3)
cp_range(5, 1, 0)
cp_range(5, 1, 1)
cp_range(5, 1, 2)
cp_range(5, 1, 3)
cp_range(5, 1, 3) == 0
cp_range(5, 1, 3)
length(cp_range(5, 1, 3))
length(cp_range(5, 1, 2))
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_lib.R")
length(cp_range(5, 1, 2))
append_cp_recursively(list(), c(0), 5, 1, 1, 0)
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_lib.R")
append_cp_recursively(list(), c(0), 5, 1, 1, 0)
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_lib.R")
append_cp_recursively(list(), c(0), 5, 1, 1, 0)
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_lib.R")
append_cp_recursively(list(), c(0), 5, 1, 1, 0)
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_lib.R")
append_cp_recursively(list(), c(0), 5, 1, 1, 0)
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_lib.R")
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_lib.R")
append_cp_recursively(list(), c(0), 5, 1, 1, 0)
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_lib.R")
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_lib.R")
append_cp_recursively(list(), c(0), 5, 1, 1, 0)
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_lib.R")
append_cp_recursively(list(), c(0), 5, 1, 1, 0)
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_lib.R")
append_cp_recursively(list(), c(0), 5, 1, 1, 0)
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_lib.R")
append_cp_recursively(list(), c(0), 5, 1, 1, 0)
max_cp_index
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_lib.R")
max_cp_index
append_cp_recursively(list(), c(0), 5, 1, 1, 0)
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_lib.R")
append_cp_recursively(list(), c(0), 5, 1, 1, 0)
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_lib.R")
append_cp_recursively(list(), c(0), 5, 1, 1, 0)
append_cp_recursively(list(), c(0), 5, 1, 2, 0)
append_cp_recursively(list(), c(0), 10, 1, 2, 0)
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_lib.R")
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_lib.R")
append_cp_recursively(list(), c(0), 10, 1, 2, 0)
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_lib.R")
append_cp_recursively(list(), c(0), 10, 1, 2, 0)
cp_range(10, 1, 0)
append_cp_recursively(list(), c(0), 12, 1, 2, 0)
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_lib.R")
# This is an example where we try to detect the "slopes"
# ================
#
# GENERATE A SAMPLE SIGNAL
#
# =================
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_lib.R")
x_sample <- rep(0,30)
x_mat <- matrix(, nrow=0, ncol = length(x_sample))
slopes <- c(1,3,1,3,1,3,1,3)
zero_period <- 12
rise_period <- 5
for (s in 1:20)
{
slope_id <- 1 # to use different slopes at different rising periods
for (t in 1:length(x_sample))
{
noise = rnorm(1,mean=0,sd=0.2)
if (t %% zero_period > 0)
{
if (t %% 12 < rise_period + 1)
{
# this is a rising period
x_sample[t] <- slopes[slope_id] * (t %% zero_period) %% rise_period + noise
}
else if (t %% 12 == rise_period + 1)
{
slope_id <- slope_id + 1
}
else {
# this is a zero period
x_sample[t] <- noise
}
}
}
x_mat <- rbind(x_mat, x_sample)
}
plot(x_sample)
# ================
#
# DEFINE A BASIS FUNCTION
#
# =================
basis = 1:30
plot(basis)
# ================
#
# DIRICHLET PROCESS GAUSSIAN MIXTURE MODEL (DP-GMM)
#
# =================
# == Initialization of the Dirichlet Process ==
# ==
# Cluster base distribution
mu0 <- 1.0
var0 <- 1.0
tau0 <- solve(var0)
# Measurement variance
vary <- 0.05
tauy <- solve(vary)
# Cluster params
# cmu <- c(mu0) # if we want we could store the cluster mean in an auxiliary variable, but let's just leave it out for the moment
# cvar <- c(var0) # we don't actually use this because in the simplest case, we just assume a fixed variance for each cluster
# All the changepoints
cp <- list()
Ncp <- 1
# We create an x_cut object which contains all the segments when cutting the x_mat time series
x_cut <- list()
# Originally, this object will just be a duplicate of x_mat, all the original time series not cut
for (ts in 1:nrow(x_mat))
{
x_cut <- append(x_cut, list(x_mat[ts,]))
}
# The number of maximum segments one time series can have
Ncp_max <- 10
# We create an "attribution" object which indicates the cluster that each segment belongs to (this is for the second CRP
# where we group the segments into the cluster
attr <- matrix(, nrow=nrow(x_mat), ncol=Ncp_max) # 10 is the maximum number of segments in each time series
attr[, 1] <- 1
Nattr_cp <- max(attr, na.rm=T)
alpha_cp <- 2 # the rate at which the time series will decide to open a larger number of changepoints that other time series has not yet considered
# == End of Initialization of the Dirichlet Process ==
# ==
Ncp_of_each_ts <- get_number_of_changepoints(cp)
Ncp_of_each_ts
for (ts_index in 1:length(x_cut))
{
ts_length <- length(x_cut[[ts_index]])
change_at <- sample(2:ts_length-1, 1)
# cp[ts_index] <- list(append(cp[[ts_index]], change_at))
cp[ts_index] <- list(change_at)
}
cp
attr[, 1] <- 1
attr[, 2] <- 1
# Number of cluster
Nattr <- 1
# Cluster spawning coefficient
alpha <- 1
ts <- x_mat[1,]
ts
basis
vary
cmu
pah <- precalculate_a_and_homogeneity(ts, basis, vary)
pah
Ncp_max
# Cluster params
cmu <- rep(0, Ncp_max) # if we want we could store the cluster mean in an auxiliary variable, but let's just leave it out for the moment
# Cluster params
cmu <- rep(mu0, Ncp_max) # if we want we could store the cluster mean in an auxiliary variable, but let's just leave it out for the moment
cvar <- var0 # we don't actually use this because in the simplest case, we just assume a fixed variance for each cluster
ctau <- solve(cvar)
find_most_likely_partitioning_of_a_time_series(30, 2, cmu, ctau, pah)
find_most_likely_partitioning_of_a_time_series(30, 2, cmu, ctau, pah)
cp_placement_extended
cp_placement
debugSource("~/Documents/anomaly-detection-ngsim/lanechange/vwp_lib.R")
find_most_likely_partitioning_of_a_time_series(30, 2, cmu, ctau, pah)
find_most_likely_partitioning_of_a_time_series(30, 2, cmu, ctau, 3, pah)
find_most_likely_partitioning_of_a_time_series(30, 2, cmu, ctau, 3, pah)
p_cp_placement
which.max(p_cp_placement)
p_cp_placement[27]
p_a_in_cluster
cmu[1]
cmu[2]
cmu[3]
cmu
mu0
Nattr_cp
p_a_in_cluster
find_most_likely_partitioning_of_a_time_series(30, 2, cmu, ctau, 1, pah)
p_cp_placement
lp_homo
p_a_in_cluster
cp_placements[[375]]
p_a_in_cluster
p_cp_placement
length(p_cp_placement)
p_cp_placement[[378]]
p_cp_placement[[375]]
cp_placement
setwd("~/Documents/anomaly-detection-ngsim/lanechange")
x_sample = 1:10
x_sample <- x_sample * 3
plot(x_sample)
x_sample
x_sample <- 0:10
x_sample <- x*sample * 3
x_sample <- x_sample * 3
plot(x_sample)
least_square(x_sample, basis)
basis <- 1:30
least_square(x_sample, basis)
basis <- 0:30
least_square(x_sample, basis)
lss <- least_square(x_sample, basis)
lss$b
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_lib.R", echo=TRUE)
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_lib.R")
reconstruct(11, lss$b, basis)
b
lss$b
basis
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_lib.R")
reconstruct(11, lss$b, basis)
plot(reconstruct(11, lss$b, basis))
plot(as.vector(reconstruct(11, lss$b, basis)))
x_sample <- -20:-10
plot(x_sample)
least_square(x_sample, basis)
plot(as.vector(reconstruct(11, least_square(x_sample, basis)$b, basis)))
points(x_sample)
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_lib.R")
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_lib.R")
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_lib.R")
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_lib.R")
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_test4cp.R", echo=TRUE)
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_test4cp.R", echo=TRUE)
debugSource("~/Documents/anomaly-detection-ngsim/lanechange/vwp_lib.R")
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_test4cp.R", echo=TRUE)
debugSource("~/Documents/anomaly-detection-ngsim/lanechange/vwp_lib.R")
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_lib.R")
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_test4cp.R", echo=TRUE)
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_lib.R")
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_lib.R")
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_lib.R", echo=TRUE)
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_test4cp.R", echo=TRUE)
cp
cmu
n_customers_at_each_table(attr)
plot(n_customers_at_each_table(attr))
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_visualize.R", echo=TRUE)
visualize_belief(x_mat, cp, cmu, attr, 1)
visualize_belief(x_mat, cp, cmu, attr, 2)
cmu
a_cut
cp
a_cut
a_cut[[1]]
all_pah[[1]]
all_pah[[1]]$a[1,5]
all_pah[[1]]
x_mat[1,]
x_mat[1,1:5]
plot(x_mat[1,])
all_pah[[1]]$a[1,5]
least_square(x_mat[1,1:5], basis)
precalculate_a_and_homogeneity(x_mat[1,], basis, vary)
spah <- precalculate_a_and_homogeneity(x_mat[1,], basis, vary)
spah$a
spah$a[1,5]
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_lib.R")
spah <- precalculate_a_and_homogeneity(x_mat[1,], basis, vary)
x_mat[1,]
x_mat[1,1:5]
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_lib.R")
x_mat[1,1:5]
spah <- precalculate_a_and_homogeneity(x_mat[1,], basis, vary)
ts_original <- x_mat[1,]
ts_original[1]
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_lib.R")
ts_original - ts_original[1]
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_lib.R")
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_lib.R")
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_lib.R")
spah <- precalculate_a_and_homogeneity(x_mat[1,], basis, vary)
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_lib.R")
spah <- precalculate_a_and_homogeneity(x_mat[1,], basis, vary)
spah$a
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_test4cp.R", echo=TRUE)
attr
cmu
n_customers_at_each_table(attr)
cmu
cp
visualize_belief(x_mat, cp, cmu, attr, 4)
pah[[4]]
pah
all_pah[[4]]
all_pah[[4]]$a[10,15]
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_test4cp.R", echo=TRUE)
attr
cmu
hist(cmu)
hist(cmu, breaks=20)
hist(cmu, breaks=30)
Nattr
cmu
cp[[4]]
cp[[18]]
x_cut[[18]]
a_cut[[18]]
visualize_belief(x_mat, cp, cmu, attr, 18)
plot(x_mat[18,])
attr[18,]
a_cut
a_cut[[18]]
pah <- precalculate_a_and_homogeneity(x_mat[18,], basis, vary)
pah$a[1,1:10]
pah$p[1,1:10]
pah$a[6,6:16]
pah$p[6,6:16]
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_lib.R")
pah <- precalculate_a_and_homogeneity(x_mat[18,], basis, vary)
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_lib.R")
pah <- precalculate_a_and_homogeneity(x_mat[18,], basis, vary)
pah$a[6,6:16]
pah$p[6,6:16]
plot(pah$p[6,6:16])
plot(x_mat[18,])
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_test4cp.R", echo=TRUE)
cp
plot(x_mat[1,])
plot(x_mat[2,])
plot(x_mat[1,])
debugSource("~/Documents/anomaly-detection-ngsim/lanechange/vwp_test4cp.R", echo=TRUE)
p_table_cp
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_test4cp.R", echo=TRUE)
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_test4cp.R", echo=TRUE)
debugSource("~/Documents/anomaly-detection-ngsim/lanechange/vwp_test4cp.R", echo=TRUE)
debugSource("~/Documents/anomaly-detection-ngsim/lanechange/vwp_test4cp.R")
debugSource("~/Documents/anomaly-detection-ngsim/lanechange/vwp_test4cp.R")
debugSource("~/Documents/anomaly-detection-ngsim/lanechange/vwp_test4cp.R")
debugSource("~/Documents/anomaly-detection-ngsim/lanechange/vwp_test4cp.R")
debugSource("~/Documents/anomaly-detection-ngsim/lanechange/vwp_test4cp.R")
debugSource("~/Documents/anomaly-detection-ngsim/lanechange/vwp_test4cp.R")
cp
f <- c(-Inf, -Inf, 1, 2)
is.inf(f)
is.infinite(f)
any(is.infinite(f))
debugSource("~/Documents/anomaly-detection-ngsim/lanechange/vwp_test4cp.R")
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_test4cp.R")
debugSource("~/Documents/anomaly-detection-ngsim/lanechange/vwp_test4cp.R")
p_table_cp
debugSource("~/Documents/anomaly-detection-ngsim/lanechange/vwp_test4cp.R")
part$lp
p_sit_with_others_cp
nk_cp
cp_seatings
debugSource("~/Documents/anomaly-detection-ngsim/lanechange/vwp_test4cp.R")
cp_seatings
cmu
ts_index
attr
cp
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_test4cp.R")
cmu
attr
attr
n_customers_at_each_table(attr)
attr[1,]
x_mat[1,]
plot(x_mat[1,])
cmu
cp[[1]]
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_test4cp.R")
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_test4cp.R")
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_test4cp.R")
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_test4cp.R")
Nattr
cp
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_test4cp.R")
attr
cp[[1]]
plot(x_mat[18,])
attr[18,]
cmu[1:3]
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_test4cp.R")
cmu
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_test4cp.R")
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_test4cp.R")
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_test4cp.R")
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_test4cp.R")
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_test4cp.R")
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_test4cp.R")
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_test4cp.R")
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_test4cp.R")
attr
cmu
plot(x_mat[18,])
cp[[18]]
attr[18,]
cmu
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_visualize.R")
visualize_belief(x_mat, cp, cmu, attr, 18)
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_test4cp.R")
visualize_belief(x_mat, cp, cmu, attr, 18)
cmu
plot(x_mat[18,])
cp[[18]]
attr[18,]
cp
attr
attr[1,]
na.omit(attr[1,])
na.exclude(attr[1,])
attr[1,][!is.na(attr[1,])]
cp
c[[1]]
cp[[1]]
cp[[-2]]
cp[[2]][-2]
f <- cp[[1]]
f
f[-2]
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_lib.R")
attr[1,]
attr_row <- attr[1,]
c(attr_row, NA)
c(attr_row[-1], NA)
attr[1] <- c(attr_row[-1], NA)
attr[1,]
attr_row <- attr[1,]
attr
attr[1] <- c(attr_row[-1], NA)
attr[1,]
c(attr_row[-1], NA)
attr[1,] <- c(attr_row[-1], NA)
attr
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_lib.R")
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_lib.R")
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_lib.R")
attr
cp
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_lib.R")
merge_segments(cp, attr)
nrow(cp)
length(cp)
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_lib.R")
merge_segments(cp, attr)
attr
merge_segments(cp, attr)
cp
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_lib.R")
Nattr_cp
attr
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_lib.R")
get_Nattr_cp_from_attr(attr)
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_test4cp.R")
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_test4cp.R")
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_test4cp.R")
cp
plot(x_mat[18,])
attr[18,]
cmu
cmu[attr[18,]]
