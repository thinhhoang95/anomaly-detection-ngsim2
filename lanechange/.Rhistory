# We calculate the search space of the changepoints placement
scaling_coeff_for_nrow <- 1
for (i in 1:table_cp)
{
scaling_coeff_for_nrow <- scaling_coeff_for_nrow * 1/i
}
total_num_of_nrow <- 1
n_ts_length <- ncol(x_mat) # length of each time series
for (i in 1:table_cp)
{
total_num_of_nrow <- total_num_of_nrow * (n_ts_length - i - 1)
}
# Begin filling in the proba for each changepoint placement hypothesis
remaining_cps <- table_cp
cp_placement <- list()
while (remaining_cps > 0)
{
current_cp <- table_cp - remaining_cps + 1
cp_range <- current_cp:(n_ts_length - table_cp - current_cp + 1)
cp_placement <- append(cp_placement, list(cp_range))
remaining_cps <- remaining_cps - 1
}
n_ts_length
n_ts_length <- ncol(x_mat) # length of each time series
# This is an example where we try to detect the "slopes"
# ================
#
# GENERATE A SAMPLE SIGNAL
#
# =================
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_lib.R")
x_sample <- rep(0,30)
x_mat <- matrix(, nrow=0, ncol = length(x_sample))
slopes <- c(1,3,1,3,1,3,1,3)
zero_period <- 12
rise_period <- 5
for (s in 1:20)
{
slope_id <- 1 # to use different slopes at different rising periods
for (t in 1:length(x_sample))
{
noise = rnorm(1,mean=0,sd=0.2)
if (t %% zero_period > 0)
{
if (t %% 12 < rise_period + 1)
{
# this is a rising period
x_sample[t] <- slopes[slope_id] * (t %% zero_period) %% rise_period + noise
}
else if (t %% 12 == rise_period + 1)
{
slope_id <- slope_id + 1
}
else {
# this is a zero period
x_sample[t] <- noise
}
}
}
x_mat <- rbind(x_mat, x_sample)
}
plot(x_sample)
# We calculate the search space of the changepoints placement
scaling_coeff_for_nrow <- 1
for (i in 1:table_cp)
{
scaling_coeff_for_nrow <- scaling_coeff_for_nrow * 1/i
}
total_num_of_nrow <- 1
n_ts_length <- ncol(x_mat) # length of each time series
for (i in 1:table_cp)
{
total_num_of_nrow <- total_num_of_nrow * (n_ts_length - i - 1)
}
# Begin filling in the proba for each changepoint placement hypothesis
remaining_cps <- table_cp
cp_placement <- list()
while (remaining_cps > 0)
{
current_cp <- table_cp - remaining_cps + 1
cp_range <- current_cp:(n_ts_length - table_cp - current_cp + 1)
cp_placement <- append(cp_placement, list(cp_range))
remaining_cps <- remaining_cps - 1
}
table_cp <- 2
# We calculate the search space of the changepoints placement
scaling_coeff_for_nrow <- 1
for (i in 1:table_cp)
{
scaling_coeff_for_nrow <- scaling_coeff_for_nrow * 1/i
}
total_num_of_nrow <- 1
n_ts_length <- ncol(x_mat) # length of each time series
for (i in 1:table_cp)
{
total_num_of_nrow <- total_num_of_nrow * (n_ts_length - i - 1)
}
# Begin filling in the proba for each changepoint placement hypothesis
remaining_cps <- table_cp
cp_placement <- list()
while (remaining_cps > 0)
{
current_cp <- table_cp - remaining_cps + 1
cp_range <- current_cp:(n_ts_length - table_cp - current_cp + 1)
cp_placement <- append(cp_placement, list(cp_range))
remaining_cps <- remaining_cps - 1
}
cp_placement
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_lib.R")
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_lib.R")
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_lib.R")
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_lib.R")
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_lib.R")
list(cbind(1,rep(0,2)))
list(cbind(1,0,0))
c(1,rep(0,2))
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_lib.R")
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_lib.R")
cp_range(20, 1)
cp_range(20, 2)
cp_range(20, 3)
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_lib.R")
cp_range(20, 3)
f <- cp_range(20,1)
f
f[which(f>3)]
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_lib.R")
f <- cp_range(20,1,3)
f
f <- cp_range(20,1,0)
f
cp_range(20,2,4)
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_lib.R")
cp_range(20,2,2)
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_lib.R")
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_lib.R")
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_lib.R")
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_lib.R")
f <- list()
append(f, list(c(1,2,3)))
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_lib.R")
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_lib.R")
cp_range(20,2,2)
f <- cp_range(20,2,2)
f[-1]
f
tail(f, n=1)
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_lib.R")
head(f, n=1)
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_lib.R")
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_lib.R")
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_lib.R")
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_lib.R")
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_lib.R")
f
append(f, 18)
f
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_lib.R")
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_lib.R")
append_cp_recursively(list(), [0,0], 5, 1, 2, 0)
append_cp_recursively(list(), c(0,0), 5, 1, 2, 0)
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_lib.R")
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_lib.R")
append_cp_recursively(list(), c(0,0), 5, 1, 2, 0)
append_cp_recursively(list(), c(0), 5, 1, 1, 0)
append_cp_recursively(list(), c(0), 5, 1, 1, 0)
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_lib.R")
append_cp_recursively(list(), c(0), 5, 1, 1, 0)
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_lib.R")
append_cp_recursively(list(), c(0), 5, 1, 1, 0)
current_cp-range
current_cp_range
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_lib.R")
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_lib.R")
append_cp_recursively(list(), c(0), 5, 1, 1, 0)
append_cp_recursively(list(), c(0), 5, 1, 1, 0)
cp_list <- list()
vec <- c(0)
n_length_ts <- 5
current_cp_index <- 1
max_cp_index <- 1
current_cp <- 0
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_lib.R")
if (current_cp_index <= max_cp_index)
{
current_cp_range <- cp_range(n_length_ts, current_cp_index, current_cp)
current_cp_range
if (current_cp <= tail(current_cp_range, n=1)) # if the current_cp is still in its range
{
if (current_cp == 0) # we have just moved into this index, let's set it to the first value it should have
{
current_cp <- head(current_cp_range, n=1)
}
# There are still things to add in this index
vec[current_cp_index] <- current_cp
if (current_cp_index == max_cp_index)
{
# cp_list <- append(cp_list, list(vec))
}
cp_list <- append_cp_recursively(cp_list, vec, n_length_ts, current_cp_index + 1, max_cp_index, current_cp)
# We try to add changepoint current_cp + 1
cp_list <- append_cp_recursively(cp_list, vec, n_length_ts, current_cp_index, max_cp_index, current_cp + 1)
}
}
return(cp_list)
if (current_cp_index <= max_cp_index)
{
current_cp_range <- cp_range(n_length_ts, current_cp_index, current_cp)
current_cp_range
if (current_cp <= tail(current_cp_range, n=1)) # if the current_cp is still in its range
{
if (current_cp == 0) # we have just moved into this index, let's set it to the first value it should have
{
current_cp <- head(current_cp_range, n=1)
}
# There are still things to add in this index
vec[current_cp_index] <- current_cp
if (current_cp_index == max_cp_index)
{
# cp_list <- append(cp_list, list(vec))
}
cp_list <- append_cp_recursively(cp_list, vec, n_length_ts, current_cp_index + 1, max_cp_index, current_cp)
# We try to add changepoint current_cp + 1
cp_list <- append_cp_recursively(cp_list, vec, n_length_ts, current_cp_index, max_cp_index, current_cp + 1)
}
}
if (current_cp_index <= max_cp_index)
{
current_cp_range <- cp_range(n_length_ts, current_cp_index, current_cp)
current_cp_range
if (current_cp <= tail(current_cp_range, n=1)) # if the current_cp is still in its range
{
if (current_cp == 0) # we have just moved into this index, let's set it to the first value it should have
{
current_cp <- head(current_cp_range, n=1)
}
# There are still things to add in this index
vec[current_cp_index] <- current_cp
if (current_cp_index == max_cp_index)
{
# cp_list <- append(cp_list, list(vec))
}
cp_list <- append_cp_recursively(cp_list, vec, n_length_ts, current_cp_index + 1, max_cp_index, current_cp)
# We try to add changepoint current_cp + 1
cp_list <- append_cp_recursively(cp_list, vec, n_length_ts, current_cp_index, max_cp_index, current_cp + 1)
}
}
current_cp_range
tail(current_cp_range, n=1)
current_cp
if (current_cp <= tail(current_cp_range, n = 1))
{}
if (current_cp <= tail(current_cp_range, n = 1))
{
print("GO")
}
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_lib.R")
append_cp_recursively(list(), c(0), 5, 1, 1, 0)
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_lib.R")
append_cp_recursively(list(), c(0), 5, 1, 1, 0)
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_lib.R")
append_cp_recursively(list(), c(0), 5, 1, 1, 0)
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_lib.R")
append_cp_recursively(list(), c(0), 5, 1, 1, 0)
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_lib.R")
append_cp_recursively(list(), c(0), 5, 1, 1, 0)
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_lib.R")
append_cp_recursively(list(), c(0), 5, 1, 1, 0)
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_lib.R")
cp_range(5, 1, 3)
cp_range(5, 1, 2)
cp_range(5, 1, 3)
cp_range(5, 1, 0)
cp_range(5, 1, 1)
cp_range(5, 1, 2)
cp_range(5, 1, 3)
cp_range(5, 1, 3) == 0
cp_range(5, 1, 3)
length(cp_range(5, 1, 3))
length(cp_range(5, 1, 2))
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_lib.R")
length(cp_range(5, 1, 2))
append_cp_recursively(list(), c(0), 5, 1, 1, 0)
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_lib.R")
append_cp_recursively(list(), c(0), 5, 1, 1, 0)
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_lib.R")
append_cp_recursively(list(), c(0), 5, 1, 1, 0)
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_lib.R")
append_cp_recursively(list(), c(0), 5, 1, 1, 0)
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_lib.R")
append_cp_recursively(list(), c(0), 5, 1, 1, 0)
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_lib.R")
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_lib.R")
append_cp_recursively(list(), c(0), 5, 1, 1, 0)
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_lib.R")
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_lib.R")
append_cp_recursively(list(), c(0), 5, 1, 1, 0)
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_lib.R")
append_cp_recursively(list(), c(0), 5, 1, 1, 0)
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_lib.R")
append_cp_recursively(list(), c(0), 5, 1, 1, 0)
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_lib.R")
append_cp_recursively(list(), c(0), 5, 1, 1, 0)
max_cp_index
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_lib.R")
max_cp_index
append_cp_recursively(list(), c(0), 5, 1, 1, 0)
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_lib.R")
append_cp_recursively(list(), c(0), 5, 1, 1, 0)
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_lib.R")
append_cp_recursively(list(), c(0), 5, 1, 1, 0)
append_cp_recursively(list(), c(0), 5, 1, 2, 0)
append_cp_recursively(list(), c(0), 10, 1, 2, 0)
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_lib.R")
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_lib.R")
append_cp_recursively(list(), c(0), 10, 1, 2, 0)
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_lib.R")
append_cp_recursively(list(), c(0), 10, 1, 2, 0)
cp_range(10, 1, 0)
append_cp_recursively(list(), c(0), 12, 1, 2, 0)
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_lib.R")
# This is an example where we try to detect the "slopes"
# ================
#
# GENERATE A SAMPLE SIGNAL
#
# =================
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_lib.R")
x_sample <- rep(0,30)
x_mat <- matrix(, nrow=0, ncol = length(x_sample))
slopes <- c(1,3,1,3,1,3,1,3)
zero_period <- 12
rise_period <- 5
for (s in 1:20)
{
slope_id <- 1 # to use different slopes at different rising periods
for (t in 1:length(x_sample))
{
noise = rnorm(1,mean=0,sd=0.2)
if (t %% zero_period > 0)
{
if (t %% 12 < rise_period + 1)
{
# this is a rising period
x_sample[t] <- slopes[slope_id] * (t %% zero_period) %% rise_period + noise
}
else if (t %% 12 == rise_period + 1)
{
slope_id <- slope_id + 1
}
else {
# this is a zero period
x_sample[t] <- noise
}
}
}
x_mat <- rbind(x_mat, x_sample)
}
plot(x_sample)
# ================
#
# DEFINE A BASIS FUNCTION
#
# =================
basis = 1:30
plot(basis)
# ================
#
# DIRICHLET PROCESS GAUSSIAN MIXTURE MODEL (DP-GMM)
#
# =================
# == Initialization of the Dirichlet Process ==
# ==
# Cluster base distribution
mu0 <- 1.0
var0 <- 1.0
tau0 <- solve(var0)
# Measurement variance
vary <- 0.05
tauy <- solve(vary)
# Cluster params
# cmu <- c(mu0) # if we want we could store the cluster mean in an auxiliary variable, but let's just leave it out for the moment
# cvar <- c(var0) # we don't actually use this because in the simplest case, we just assume a fixed variance for each cluster
# All the changepoints
cp <- list()
Ncp <- 1
# We create an x_cut object which contains all the segments when cutting the x_mat time series
x_cut <- list()
# Originally, this object will just be a duplicate of x_mat, all the original time series not cut
for (ts in 1:nrow(x_mat))
{
x_cut <- append(x_cut, list(x_mat[ts,]))
}
# The number of maximum segments one time series can have
Ncp_max <- 10
# We create an "attribution" object which indicates the cluster that each segment belongs to (this is for the second CRP
# where we group the segments into the cluster
attr <- matrix(, nrow=nrow(x_mat), ncol=Ncp_max) # 10 is the maximum number of segments in each time series
attr[, 1] <- 1
Nattr_cp <- max(attr, na.rm=T)
alpha_cp <- 2 # the rate at which the time series will decide to open a larger number of changepoints that other time series has not yet considered
# == End of Initialization of the Dirichlet Process ==
# ==
Ncp_of_each_ts <- get_number_of_changepoints(cp)
Ncp_of_each_ts
for (ts_index in 1:length(x_cut))
{
ts_length <- length(x_cut[[ts_index]])
change_at <- sample(2:ts_length-1, 1)
# cp[ts_index] <- list(append(cp[[ts_index]], change_at))
cp[ts_index] <- list(change_at)
}
cp
attr[, 1] <- 1
attr[, 2] <- 1
# Number of cluster
Nattr <- 1
# Cluster spawning coefficient
alpha <- 1
ts <- x_mat[1,]
ts
basis
vary
cmu
pah <- precalculate_a_and_homogeneity(ts, basis, vary)
pah
Ncp_max
# Cluster params
cmu <- rep(0, Ncp_max) # if we want we could store the cluster mean in an auxiliary variable, but let's just leave it out for the moment
# Cluster params
cmu <- rep(mu0, Ncp_max) # if we want we could store the cluster mean in an auxiliary variable, but let's just leave it out for the moment
cvar <- var0 # we don't actually use this because in the simplest case, we just assume a fixed variance for each cluster
ctau <- solve(cvar)
find_most_likely_partitioning_of_a_time_series(30, 2, cmu, ctau, pah)
find_most_likely_partitioning_of_a_time_series(30, 2, cmu, ctau, pah)
cp_placement_extended
cp_placement
debugSource("~/Documents/anomaly-detection-ngsim/lanechange/vwp_lib.R")
find_most_likely_partitioning_of_a_time_series(30, 2, cmu, ctau, pah)
find_most_likely_partitioning_of_a_time_series(30, 2, cmu, ctau, 3, pah)
find_most_likely_partitioning_of_a_time_series(30, 2, cmu, ctau, 3, pah)
p_cp_placement
which.max(p_cp_placement)
p_cp_placement[27]
p_a_in_cluster
cmu[1]
cmu[2]
cmu[3]
cmu
mu0
Nattr_cp
p_a_in_cluster
find_most_likely_partitioning_of_a_time_series(30, 2, cmu, ctau, 1, pah)
p_cp_placement
lp_homo
p_a_in_cluster
cp_placements[[375]]
p_a_in_cluster
p_cp_placement
length(p_cp_placement)
p_cp_placement[[378]]
p_cp_placement[[375]]
cp_placement
git
pah
setwd("~/Documents/anomaly-detection-ngsim/lanechange")
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_lanechangetest.R")
pah
dim(pah)
all_pah
all_pah[1]
all_pah[[1]]
all_pah[[1]]$p
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_lanechangetest.R")
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_lib.R")
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_lanechangetest.R")
cmu
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_lanechangetest.R")
cmu
attr
cp
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_lanechangetest.R")
cmu
attr
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_visualize.R")
explain_belief(x_mat, cp, cmu, attr, 40)
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_lanechangetest.R")
cmu
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_lanechangetest.R")
source("~/Documents/anomaly-detection-ngsim/lanechange/vwp_lanechangetest.R")
explain_belief(x_mat, cp, cmu, attr, 40)
explain_belief(x_mat, cp, cmu, attr, 30)
explain_belief(x_mat, cp, cmu, attr, 20)
explain_belief(x_mat, cp, cmu, attr, 10)
explain_belief(x_mat, cp, cmu, attr, 1)
explain_belief(x_mat, cp, cmu, attr, 2)
explain_belief(x_mat, cp, cmu, attr, 4)
pah
pah[[1]]
pah[[1]]$p
pah[[1]]
all_pah[[1]]$p
all_pah[[1]]$p
find_most_likely_partitioning_of_a_time_series(41, 1, cmu, ctau, Nattr, all_pah[[41]])
all_pah[[41]]
all_pah[[40]]
find_most_likely_partitioning_of_a_time_series(41, 1, cmu, ctau, Nattr, all_pah[[40]])
explain_belief(x_mat, cp, cmu, attr, 40)
explain_belief(x_mat, cp, cmu, attr, 4)
find_most_likely_partitioning_of_a_time_series(41, 1, cmu, ctau, Nattr, all_pah[[4]])
find_most_likely_partitioning_of_a_time_series(41, 1, cmu, ctau, Nattr, all_pah[[3]])
find_most_likely_partitioning_of_a_time_series(41, 1, c(0,-4,4), ctau, Nattr, all_pah[[3]])
